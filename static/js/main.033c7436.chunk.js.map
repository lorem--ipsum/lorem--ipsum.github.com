{"version":3,"sources":["avatar.jpeg","section-label/section-label.tsx","definition-list/definition-list.tsx","id-card/id-card.tsx","timeline/timeline.tsx","serviceWorker.ts","index.tsx","app.tsx"],"names":["module","exports","SectionLabel","props","label","className","DefinitionList","groups","title","map","group","key","items","item","i","IDCard","alt","src","avatar","href","viewBox","d","reverse","join","Timeline","years","company","Fragment","toYear","duration","description","tags","fromYear","Boolean","window","location","hostname","match","ReactDOM","render","career","skills","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ihFAAAA,EAAOC,QAAU,IAA0B,qC,y7BCQpC,SAASC,EAAaC,GAA2B,IAC9CC,EAAUD,EAAVC,MAER,OAAO,yBAAKC,UAAU,iBAAiBD,G,MCGlC,SAASE,EAAeH,GAA6B,IAClDI,EAAkBJ,EAAlBI,OAAQC,EAAUL,EAAVK,MAEhB,OACE,yBAAKH,UAAU,mBACZG,GAAS,kBAACN,EAAD,CAAcE,MAAOI,IAC9BD,EAAOE,KAAI,SAAAC,GACV,OACE,yBAAKL,UAAU,QAAQM,IAAKD,EAAMF,OAChC,yBAAKH,UAAU,SAASK,EAAMF,OAC9B,yBAAKH,UAAU,SACZK,EAAME,MAAMH,KAAI,SAACI,EAAMC,GACtB,OACE,yBAAKH,IAAKG,EAAGT,UAAU,QACpBQ,Y,0BCtBN,SAASE,IACtB,OACE,yBAAKV,UAAU,WACb,yBAAKA,UAAU,SAASW,IAAI,GAAGC,IAAKC,MACpC,yBAAKb,UAAU,SAAf,yBACA,yBAAKA,UAAU,eAAf,6BACA,yBAAKA,UAAU,UACb,uBAAGA,UAAU,cAAcc,KAAK,oCAC9B,yBAAKC,QAAQ,eACX,0BAAMC,EAAE,+xCAIZ,uBACEhB,UAAU,aACVc,KAAI,iBAAY,CAAC,cAAe,qBAC7BG,UACAC,KAAK,KAFJ,yBAIJ,yBAAKH,QAAQ,eACX,0BAAMC,EAAE,wd,iBCNb,SAASG,EAASrB,GAAuB,IACtCS,EAAiBT,EAAjBS,MAAOJ,EAAUL,EAAVK,MAETiB,EAAQb,EAAMH,KAAI,SAACI,EAAMC,GAC7B,IAAMY,EAAU,yBAAKrB,UAAU,WAAWQ,EAAKa,SAE/C,OACE,kBAAC,IAAMC,SAAP,CAAgBhB,IAAKG,GACZ,IAANA,GAAW,yBAAKT,UAAU,qBAAqBQ,EAAKe,QACrD,yBAAKvB,UAAU,cACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,SACZQ,EAAKT,MADR,IACe,0BAAMC,UAAU,YAAYQ,EAAKgB,WAE/ChB,EAAKM,KAAO,uBAAGA,KAAMN,EAAKM,MAAOO,GAAeA,EACjD,yBAAKrB,UAAU,eAAeQ,EAAKiB,aACnC,yBAAKzB,UAAU,QAAQQ,EAAKkB,KAAKR,KAAK,UAG1C,yBAAKlB,UAAU,QAAQQ,EAAKmB,cAKlC,OACE,yBAAK3B,UAAU,YACZG,GAAS,kBAACN,EAAD,CAAcE,MAAOI,IAC9BiB,G,MCnCaQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCID,WACb,OACE,yBAAKlC,UAAU,OACb,kBAACU,EAAD,MACA,yBAAKV,UAAU,UACb,kBAACmB,EAAD,CAAUhB,MAAM,kBAAkBI,MAAO4B,KAE3C,yBAAKnC,UAAU,UACb,kBAACC,EAAD,CAAgBE,MAAM,SAASD,OAAQkC,QDZ/B,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.033c7436.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.b01b9edc.jpeg\";","import React from 'react';\n\nimport './section-label.scss';\n\ninterface SectionLabelProps {\n  label: string;\n}\n\nexport function SectionLabel(props: SectionLabelProps) {\n  const { label } = props;\n\n  return <div className=\"section-label\">{label}</div>;\n}\n","import React from 'react';\n\nimport { SectionLabel } from '../section-label/section-label';\n\nimport './definition-list.scss';\n\ninterface DefinitionListProps {\n  title?: string;\n  groups: {\n    title: string;\n    items: string[];\n  }[];\n}\n\nexport function DefinitionList(props: DefinitionListProps) {\n  const { groups, title } = props;\n\n  return (\n    <div className=\"definition-list\">\n      {title && <SectionLabel label={title} />}\n      {groups.map(group => {\n        return (\n          <div className=\"group\" key={group.title}>\n            <div className=\"title\">{group.title}</div>\n            <div className=\"items\">\n              {group.items.map((item, i) => {\n                return (\n                  <div key={i} className=\"item\">\n                    {item}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import React from 'react';\n\nimport avatar from '../avatar.jpeg';\n\nimport './id-card.scss';\n\nexport default function IDCard() {\n  return (\n    <div className=\"id-card\">\n      <img className=\"avatar\" alt=\"\" src={avatar} />\n      <div className=\"label\">SÃ©bastien Fragnaud</div>\n      <div className=\"description\">Senior front-end engineer</div>\n      <div className=\"social\">\n        <a className=\"icon github\" href=\"https://github.com/lorem--ipsum/\">\n          <svg viewBox=\"0 0 496 512\">\n            <path d=\"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\" />\n          </svg>\n        </a>\n\n        <a\n          className=\"icon email\"\n          href={`mailto:${['fragnaud.fr', 'sebastien+website']\n            .reverse()\n            .join('@')}?subject=Hello there`}\n        >\n          <svg viewBox=\"0 0 512 512\">\n            <path d=\"M464 64H48C21.5 64 0 85.5 0 112v288c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM48 96h416c8.8 0 16 7.2 16 16v41.4c-21.9 18.5-53.2 44-150.6 121.3-16.9 13.4-50.2 45.7-73.4 45.3-23.2.4-56.6-31.9-73.4-45.3C85.2 197.4 53.9 171.9 32 153.4V112c0-8.8 7.2-16 16-16zm416 320H48c-8.8 0-16-7.2-16-16V195c22.8 18.7 58.8 47.6 130.7 104.7 20.5 16.4 56.7 52.5 93.3 52.3 36.4.3 72.3-35.5 93.3-52.3 71.9-57.1 107.9-86 130.7-104.7v205c0 8.8-7.2 16-16 16z\" />\n          </svg>\n        </a>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { SectionLabel } from '../section-label/section-label';\n\nimport './timeline.scss';\n\ninterface TimelineProps {\n  title?: string;\n  items: {\n    label: string;\n    description: string;\n    duration: string;\n    fromYear: number | string;\n    toYear: number | string;\n    company: string;\n    href: string;\n    tags: string[];\n  }[];\n}\n\nexport function Timeline(props: TimelineProps) {\n  const { items, title } = props;\n\n  const years = items.map((item, i) => {\n    const company = <div className=\"company\">{item.company}</div>;\n\n    return (\n      <React.Fragment key={i}>\n        {i === 0 && <div className=\"year active first\">{item.toYear}</div>}\n        <div className=\"experience\">\n          <div className=\"card\">\n            <div className=\"title\">\n              {item.label} <span className=\"duration\">{item.duration}</span>\n            </div>\n            {item.href ? <a href={item.href}>{company}</a> : company}\n            <div className=\"description\">{item.description}</div>\n            <div className=\"tags\">{item.tags.join(' - ')}</div>\n          </div>\n        </div>\n        <div className=\"year\">{item.fromYear}</div>\n      </React.Fragment>\n    );\n  });\n\n  return (\n    <div className=\"timeline\">\n      {title && <SectionLabel label={title} />}\n      {years}\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\nimport career from './career.json';\nimport { DefinitionList } from './definition-list/definition-list';\nimport IDCard from './id-card/id-card';\nimport skills from './skills.json';\nimport { Timeline } from './timeline/timeline';\n\nimport './app.scss';\n\nexport default function App() {\n  return (\n    <div className=\"app\">\n      <IDCard />\n      <div className=\"career\">\n        <Timeline title=\"Work Experience\" items={career} />\n      </div>\n      <div className=\"skills\">\n        <DefinitionList title=\"Skills\" groups={skills} />\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}